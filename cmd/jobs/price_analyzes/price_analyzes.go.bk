package main

import (
	"database/sql"
	"fmt"
	"strconv"

	// "strconv"
	_ "github.com/go-sql-driver/mysql"
)

type SqlConfig struct {
	Password     string
	UserName     string
	MysqlIP      string
	MysqlPort    int
	DatabaseName string
	TableName    string
}

const (
	DBName    = "words"
	TableName = "house_price"
)

type TableInfo struct {
	PerSquar string `json:"per_squar"`
}

var DBConnection = MakeConnectionToDB()

func main() {
	fmt.Println("Average price house: ", makeAveragePrice("house_price_1739485032"))
	fmt.Println("Average price house: ", makeAveragePrice("house_price_1739484998"))
	fmt.Println("Average price house: ", makeAveragePrice("house_price_24_11_1403"))
	fmt.Println("Average price house: ", makeAveragePrice("house_price_25_11_1403"))
	fmt.Println("Average price house: ", makeAveragePrice("house_price_1739533801"))
	fmt.Println("Average price house: ", makeAveragePrice("house_price_1739535931"))
	//  For convert epoch to date: date -r 1739590786 '+%m/%d/%Y:%H:%M:%S' => 11/25/2020:08:00:00
	fmt.Println("Average price house majidieh: ", makeAveragePrice("house_price_majidieh_1739590786"))
	fmt.Println("Average price house majidieh: ", makeAveragePrice("house_price_majidieh_1739608578"))
	fmt.Println("Average price house majidieh: ", makeAveragePrice("house_price_majidieh_1739732032"))
	fmt.Println("Average price house majidieh: ", makeAveragePrice("house_price"))
	// ZScore(tableName)

}

func MakeConnectionToDB() *sql.DB {
	SqlConfig := SqlConfig{
		Password:     "test@test",
		UserName:     "root",
		MysqlIP:      "127.0.0.1",
		MysqlPort:    3306,
		DatabaseName: "words",
		TableName:    "word",
	}
	connectioString := fmt.Sprintf("%v:%v@tcp(%v:%v)/%v", SqlConfig.UserName, SqlConfig.Password, SqlConfig.MysqlIP, SqlConfig.MysqlPort, SqlConfig.DatabaseName)
	db, err := sql.Open("mysql", connectioString)

	if err != nil {
		panic(err.Error())
	}
	// defer db.Close()
	return db // Make correct return db.

}

func makeAveragePrice(tableName string) int {

	id := 0
	sumPrice := 0
	var averagePrice float64
	averagePrice = 0.0

	var priceList []int

	perSquar := TableInfo{
		PerSquar: `json:"per_squar"`,
	}
	var tableCreationTime = fmt.Sprintf("SELECT per_squar from %v where not per_squar = 0", tableName)
	timeTable, err := DBConnection.Query(tableCreationTime)

	if err != nil {
		fmt.Println("Cannot find creation table with error: ", err)
	}

	for timeTable.Next() {
		err := timeTable.Scan(&perSquar.PerSquar)
		if err != nil {
			fmt.Println("Cannot find table creation time with: ", err)
		}
		id++
		priceInt, _ := strconv.Atoi(perSquar.PerSquar)
		priceList = append(priceList, priceInt)
	}
	for i := 0; i < len(priceList); i++ {
		sumPrice = priceList[i] + sumPrice
	}
	averagePrice = float64(sumPrice) / float64(id)

	return int(averagePrice)
}

// func ZScore(tableName string) {
// 	_, allPrice := makeAveragePrice(tableName)
// 	fmt.Println()
// }
